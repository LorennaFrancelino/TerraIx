//#include "TerraIno.defs"
#include "TerraNet.defs"


//
// Globals
//
var ubyte stat;
// Gauss Model
// ms_gauss_model size = GMODEL_SIZE = 964 bytes
//var ubyte[GMODEL_SIZE] gModel;
var ubyte[POOL_LEN] buffer_pool_scale;
var ushort[POOL_LEN] buffer_pool_count;
var ulong[POOL_LEN] buffer_pool_rtime_map;
var ubyte[POOL_LEN] buffer_pool_avail_map;
//var ubyte[1138] fft_cfg; //1138
var ulong requested_rtime; // the rtime that BS requires the sensor to do detection
//var ubyte[GMODEL_SIZE] gModel;
var long[BUFFER_POOL_LEN] buffer_pool;
emit LEDS(0);
await 300ms;


// Init

/*
do
  // fft alloc -> Format fft_cfg
  var ushort fft_mem_len = 1138; // 1138 is for 100-point FFT on TelosB; 1276 on TOSSIM
  var ubyte fft_points=100; //100
    stat = fftAlloc(fft_points,0,fft_cfg,&fft_mem_len);
    stat = gModelRead(gModel);
    stat = await GMODEL_RD_DONE;

  // Initialize buffer_pool_avail_map
  loop i, POOL_LEN do
    buffer_pool_avail_map[i] = TRUE;
  end
  finally
  stat=0;
end
*/


//  loop z1, 200 do
//requested_rtime = z1;
    par/and do    
      // Local MSG_START run
      // Sensor Data
      var ulong m_addr = 0;
      var streamData sData;
      // RSensorTime
      var ulong rtime = 0;
      // Read Sensor Data
      var ushort count;

emit LED0(TOGGLE);
      emit RD_STREAM(sData);
emit LED1(TOGGLE);
      count = await STREAM_RD_DONE();
emit LED2(TOGGLE);

	  
    with
    	loop do await 1s; end
    
      await 1s;
//	  emit LED2(TOGGLE);


var ubyte mdata = getMem(27);
if mdata == 0x0c then 
	emit LEDS(1);
else/if mdata == 0x95 then 
	emit LEDS(2);
else/if mdata == 0 then 
	emit LEDS(3);
else 
	emit LEDS(4);
end
await 1000s;



    end // par/and
//  end //loop


/*
pktype usrMsg1 from radioMsg with
	var ubyte[4] d8;
	var ushort[4] d16;
	var ulong[2] d32;
end
var usrMsg1 msg1;
event float ev1;
var long xx1;//= 2.1;
var byte xx2;// = xx1 * 1.0 ;
msg1.type =  xx2;

*/

//var byte xx = 1.0;
//var byte yy; yy = 2;
/*
var byte xx;
    par/and do
    	xx=1;
		await 1s;
loop b, 10 do
end
    with
    	xx=2;
      await 33s;
loop a, 10 do
end
    end

xx=3;
/*
var byte[5] zz1;

if TRUE then
	var float xx1;
	xx1=55;
else
	xx1=77;
end
	event byte evt2;

zz1[xx2] = xx1+1;
ev1 = msg1.d8[1];
xx1=await ev1;
setRTime(1);

await 1s;

var float ffff = <float>10;

var ubyte xb= 0x0e1;


event float evt1;
emit evt1(5.2);

emit LEDS(7);

await 10 ms;


msg1.source=getNodeId();
msg1.target=BROADCAST;

var ushort a=420;
var short b;
var long  c=0;

var long al,bl;
al = a;
bl = al - 500;
b = bl;
msg1.d8[0] = bl > 0;
msg1.d8[1] = bl < 0;

c = c + b;

emit LEDS(0);
msg1.d16[0]=a;
msg1.d16[1]=b;
msg1.d32[0]=c;

emit LED0(ON);

emit SEND(msg1);
await SEND_DONE;

emit LED1(ON);

emit SEND(msg1);
await SEND_DONE;

/*
*/



