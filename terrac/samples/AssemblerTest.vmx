220 1043 3 12 1 0 102 3 96
00 | 00000 0 track 0
00 | 00001 0
00 | 00002 0
00 | 00003 0
00 | 00004 0 track 1
00 | 00005 0
00 | 00006 0
00 | 00007 0
00 | 00008 0 track 2
00 | 00009 0
00 | 00010 0
00 | 00011 0
00 | 00012 0 track 3
00 | 00013 0
00 | 00014 0
00 | 00015 0
00 | 00016 0000 wClock 0
00 | 00017 0001
00 | 00018 0002
00 | 00019 0003
00 | 00020 0004
00 | 00021 0005
00 | 00022 0006
00 | 00023 0007
00 | 00024 0008 wClock 1
00 | 00025 0009
00 | 00026 0010
00 | 00027 0011
00 | 00028 0012
00 | 00029 0013
00 | 00030 0014
00 | 00031 0015
00 | 00032 0016 wClock 2
00 | 00033 0017
00 | 00034 0018
00 | 00035 0019
00 | 00036 0020
00 | 00037 0021
00 | 00038 0022
00 | 00039 0023
00 | 00040 0024 wClock 3
00 | 00041 0025
00 | 00042 0026
00 | 00043 0027
00 | 00044 0028
00 | 00045 0029
00 | 00046 0030
00 | 00047 0031
00 | 00048 0032 wClock 4
00 | 00049 0033
00 | 00050 0034
00 | 00051 0035
00 | 00052 0036
00 | 00053 0037
00 | 00054 0038
00 | 00055 0039
00 | 00056 0040 wClock 5
00 | 00057 0041
00 | 00058 0042
00 | 00059 0043
00 | 00060 0044
00 | 00061 0045
00 | 00062 0046
00 | 00063 0047
00 | 00064 0048 wClock 6
00 | 00065 0049
00 | 00066 0050
00 | 00067 0051
00 | 00068 0052
00 | 00069 0053
00 | 00070 0054
00 | 00071 0055
00 | 00072 0056 wClock 7
00 | 00073 0057
00 | 00074 0058
00 | 00075 0059
00 | 00076 0060
00 | 00077 0061
00 | 00078 0062
00 | 00079 0063
00 | 00080 0064 wClock 8
00 | 00081 0065
00 | 00082 0066
00 | 00083 0067
00 | 00084 0068
00 | 00085 0069
00 | 00086 0070
00 | 00087 0071
00 | 00088 0072 wClock 9
00 | 00089 0073
00 | 00090 0074
00 | 00091 0075
00 | 00092 0076
00 | 00093 0077
00 | 00094 0078
00 | 00095 0079
00 | 00096 0080 wClock 10
00 | 00097 0081
00 | 00098 0082
00 | 00099 0083
00 | 00100 0084
00 | 00101 0085
00 | 00102 0086
00 | 00103 0087
00 | 00104 0088 wClock 11
00 | 00105 0089
00 | 00106 0090
00 | 00107 0091
00 | 00108 0092
00 | 00109 0093
00 | 00110 0094
00 | 00111 0095
00 | 00112 0096 async_0
00 | 00113 0097
00 | 00114 0098 emits 0
00 | 00115 0099
00 | 00116 0100 emits 1
00 | 00117 0101
00 | 00118 0102 inEvt 005 : TEMP
00 | 00119 0103           : 01 gates
00 | 00120 0104
00 | 00121 0105
00 | 00122 0106 inEvt 006 : PHOTO
00 | 00123 0107           : 01 gates
00 | 00124 0108
00 | 00125 0109
00 | 00126 0110 inEvt 040 : SEND_DONE()
00 | 00127 0111           : 08 gates
00 | 00128 0112
00 | 00129 0113
00 | 00130 0114
00 | 00131 0115
00 | 00132 0116
00 | 00133 0117
00 | 00134 0118
00 | 00135 0119
00 | 00136 0120
00 | 00137 0121
00 | 00138 0122
00 | 00139 0123
00 | 00140 0124
00 | 00141 0125
00 | 00142 0126
00 | 00143 0127
00 | 00144 0128
00 | 00145 0129
00 | 00146 0130
00 | 00147 0131
00 | 00148 0132
00 | 00149 0133
00 | 00150 0134
00 | 00151 0135
00 | 00152 0136 $ret:1, 
00 | 00153 0137 testStep:2, 
00 | 00154 0138 
00 | 00155 0139 testStatus:1, 
00 | 00156 0140 msgRadio:25, 
00 | 00157 0141 
00 | 00158 0142 
00 | 00159 0143 
00 | 00160 0144 
00 | 00161 0145 
00 | 00162 0146 
00 | 00163 0147 
00 | 00164 0148 
00 | 00165 0149 
00 | 00166 0150 
00 | 00167 0151 
00 | 00168 0152 
00 | 00169 0153 
00 | 00170 0154 
00 | 00171 0155 
00 | 00172 0156 
00 | 00173 0157 
00 | 00174 0158 
00 | 00175 0159 
00 | 00176 0160 
00 | 00177 0161 
00 | 00178 0162 
00 | 00179 0163 
00 | 00180 0164 
00 | 00181 0165 count:1, evt1:1, xx:1, moteid:2, xx:16, stat:1, 
00 | 00182 0166 i:1, evt1_awt0, time:4, xx:1, 
00 | 00183 0167 __i_0x84b0c98:1, evt1_waits[1], idx:1, temp:4, 
00 | 00184 0168 yy:8, 
00 | 00185 0169 xx:1, 
00 | 00186 0170 ParAnd_flag[2], 
00 | 00187 0171 temp2:2, 
00 | 00188 0172 
00 | 00189 0173 msgRadio2:25, 
00 | 00190 0174 
00 | 00191 0175 
00 | 00192 0176 xx:2, 
00 | 00193 0177 
00 | 00194 0178 stat:1, 
00 | 00195 0179 
00 | 00196 0180 
00 | 00197 0181 idx:1, 
00 | 00198 0182 yy:4, 
00 | 00199 0183 
00 | 00200 0184 
00 | 00201 0185 
00 | 00202 0186 stat:1, 
00 | 00203 0187 stat2:1, 
00 | 00204 0188 
00 | 00205 0189 
00 | 00206 0190 
00 | 00207 0191 
00 | 00208 0192 
00 | 00209 0193 
00 | 00210 0194 
00 | 00211 0195 
00 | 00212 0196 
00 | 00213 0197 
00 | 00214 0198 xx:1, 
00 | 00215 0199 xx_awt0, 
00 | 00216 0200 temp:4, 
00 | 00217 0201 
00 | 00218 0202 
00 | 00219 0203 
d1 | 00220 d1 set_c ushort 102 1281         | config gate TEMP with 1 await(s) - 0x0501 = 1281
66 | 00221 66 
05 | 00222 05 
01 | 00223 01 
d1 | 00224 d1 set_c ushort 106 1537         | config gate PHOTO with 1 await(s) - 0x0601 = 1537
6a | 00225 6a 
06 | 00226 06 
01 | 00227 01 
d1 | 00228 d1 set_c ushort 110 10376        | config gate SEND_DONE() with 8 await(s) - 0x2888 = 10376
6e | 00229 6e 
28 | 00230 28 
88 | 00231 88 
c1 | 00232 c1 set_c ushort 137 0            | testStep = 0
89 | 00233 89 
00 | 00234 00 
c0 | 00235 c0 set_c ubyte 140 1             | msgRadio.type = 1
8c | 00236 8c 
01 | 00237 01 
c1 | 00238 c1 set_c ushort 143 1            | msgRadio.target = 1
8f | 00239 8f 
01 | 00240 01 
29 | 00241 29 clken_c 0 1000 5              | clock enable Awake_1000_5 1000msec
03 | 00242 03 
00 | 00243 00 
03 | 00244 03 
e8 | 00245 e8 
00 | 00246 .00 addr:249
f9 | 00247 .05 
01 | 00248 01 end                           | end
c1 | 00249 c1 set_c ushort 137 01           | testStep = 01
89 | 00250 89 
01 | 00251 01 
c0 | 00252 c0 set_c ubyte 145 1             | msgRadio.d8[0] = 1
91 | 00253 91 
01 | 00254 01 
2a | 00255 2a set_v ushort 149 ushort 137   | msgRadio.d16[0] = testStep
11 | 00256 11 
95 | 00257 95 
89 | 00258 89 
b1 | 00259 b1 outevt_v 40 140               | emit SEND len=25 var=msgRadio
28 | 00260 28 
8c | 00261 8c 
90 | 00262 90 push_v ubyte 140              | push msgRadio.type [Optm:: push_c addr + deref]
8c | 00263 8c 
a0 | 00264 a0 pop ubyte 112                 | evt SEND_DONE() auxId = pop
70 | 00265 70 
d1 | 00266 d1 set_c ushort 113 11           | await SEND_DONE()[0]
71 | 00267 71 
01 | 00268 .00 addr:271
0f | 00269 .0b 
01 | 00270 01 end                           | end
29 | 00271 29 clken_c 1 100 12              | clock enable Awake_100_12 100msec
01 | 00272 01 
01 | 00273 01 
64 | 00274 64 
01 | 00275 .00 addr:278
16 | 00276 .0c 
01 | 00277 01 end                           | end
c1 | 00278 c1 set_c ushort 137 02           | testStep = 02
89 | 00279 89 
02 | 00280 02 
c4 | 00281 c4 set_c byte 165 0              | count = 0
a5 | 00282 a5 
00 | 00283 00 
c0 | 00284 c0 set_c ubyte 166 0             | i = 0
a6 | 00285 a6 
00 | 00286 00 
c0 | 00287 c0 set_c ubyte 167 10            | __i_0x84b0c98 = 10
a7 | 00288 a7 
0a | 00289 0a 
90 | 00290 90 push_v ubyte 167              | push __i_0x84b0c98:ubyte
a7 | 00291 a7 
90 | 00292 90 push_v ubyte 166              | push i:ubyte
a6 | 00293 a6 
11 | 00294 11 gte                           | gte
4f | 00295 4f ifelse 23 24                  | ifelse True_23 False_24
01 | 00296 .00 addr:300
2c | 00297 .17 
01 | 00298 .00 addr:308
34 | 00299 .18 
3d | 00300 3d tkins_z 1 8 18                | insert track Loop_out_18 tree 8
88 | 00301 88 
01 | 00302 .00 addr:317
3d | 00303 .12 
01 | 00304 01 end                           | end
39 | 00305 39 exec 25                       | goto  25
01 | 00306 .00 addr:290
22 | 00307 .10 
40 | 00308 40 push_c 165                    | push &count
a5 | 00309 a5 
60 | 00310 60 inc byte                      | inc byte
40 | 00311 40 push_c 166                    | push &i
a6 | 00312 a6 
60 | 00313 60 inc ubyte                     | inc ubyte
39 | 00314 39 exec 25                       | goto  25
01 | 00315 .00 addr:290
22 | 00316 .10 
29 | 00317 29 clken_c 2 1 29                | clock enable Awake_1_29 1msec
01 | 00318 01 
02 | 00319 02 
01 | 00320 01 
01 | 00321 .00 addr:324
44 | 00322 .1d 
01 | 00323 01 end                           | end
40 | 00324 40 push_c 165                    | push &count
a5 | 00325 a5 
60 | 00326 60 inc byte                      | inc byte
40 | 00327 40 push_c 20                     | push 20
14 | 00328 14 
94 | 00329 94 push_v byte 165               | push count:byte
a5 | 00330 a5 
0f | 00331 0f eq                            | eq
4f | 00332 4f ifelse 31 32                  | ifelse True_31 EndIf_32
01 | 00333 .00 addr:337
51 | 00334 .1f 
01 | 00335 .00 addr:317
3d | 00336 .1a 
3d | 00337 3d tkins_z 1 7 28                | insert track Loop_out_28 tree 7
87 | 00338 87 
01 | 00339 .00 addr:345
59 | 00340 .1c 
01 | 00341 01 end                           | end
39 | 00342 39 exec 32                       | goto  32
01 | 00343 .00 addr:317
3d | 00344 .1a 
48 | 00345 48 memclr 16 8                   | clear WClocks gates from 2 to 3
10 | 00346 10 
08 | 00347 08 
2a | 00348 2a set_v ubyte 146 byte 165      | msgRadio.d8[1] = count
04 | 00349 04 
92 | 00350 92 
a5 | 00351 a5 
40 | 00352 40 push_c 20                     | push 20
14 | 00353 14 
94 | 00354 94 push_v byte 165               | push count:byte
a5 | 00355 a5 
0f | 00356 0f eq                            | eq
a0 | 00357 a0 pop ubyte 145                 | pop msgRadio.d8[0]
91 | 00358 91 
2a | 00359 2a set_v ushort 149 ushort 137   | msgRadio.d16[0] = testStep
11 | 00360 11 
95 | 00361 95 
89 | 00362 89 
b1 | 00363 b1 outevt_v 40 140               | emit SEND len=25 var=msgRadio
28 | 00364 28 
8c | 00365 8c 
90 | 00366 90 push_v ubyte 140              | push msgRadio.type [Optm:: push_c addr + deref]
8c | 00367 8c 
a0 | 00368 a0 pop ubyte 115                 | evt SEND_DONE() auxId = pop
73 | 00369 73 
d1 | 00370 d1 set_c ushort 116 40           | await SEND_DONE()[1]
74 | 00371 74 
01 | 00372 .00 addr:375
77 | 00373 .28 
01 | 00374 01 end                           | end
29 | 00375 29 clken_c 3 100 41              | clock enable Awake_100_41 100msec
01 | 00376 01 
03 | 00377 03 
64 | 00378 64 
01 | 00379 .00 addr:382
7e | 00380 .29 
01 | 00381 01 end                           | end
c0 | 00382 c0 set_c ubyte 146 0             | msgRadio.d8[1] = 0
92 | 00383 92 
00 | 00384 00 
c1 | 00385 c1 set_c ushort 137 03           | testStep = 03
89 | 00386 89 
03 | 00387 03 
c0 | 00388 c0 set_c ubyte 166 1             | event evt1 = 1 gates
a6 | 00389 a6 
01 | 00390 01 
48 | 00391 48 memclr 167 2                  | clear evt1 1 wait(s) 
a7 | 00392 a7 
02 | 00393 02 
40 | 00394 40 push_c 10                     | push 10
0a | 00395 0a 
04 | 00396 04 neg                           | neg
a4 | 00397 a4 pop byte 169                  | pop xx
a9 | 00398 a9 
48 | 00399 48 memclr 170 2                  | clear gates from addr 170 to addr 171
aa | 00400 aa 
02 | 00401 02 
89 | 00402 89 tkins_max 0 43                | insert track ParAnd_sub_1_43
01 | 00403 .00 addr:409
99 | 00404 .2b 
89 | 00405 89 tkins_max 0 44                | insert track ParAnd_sub_2_44
01 | 00406 .00 addr:431
af | 00407 .2c 
01 | 00408 01 end                           | end
89 | 00409 89 tkins_max 0 48                | insert track Await_evt1_48
01 | 00410 .00 addr:413
9d | 00411 .30 
01 | 00412 01 end                           | end
d1 | 00413 d1 set_c ushort 167 49           | await Awake_evt1_49
a7 | 00414 a7 
01 | 00415 .00 addr:418
a2 | 00416 .31 
01 | 00417 01 end                           | end
94 | 00418 94 push_v byte 165               | push evt1:byte
a5 | 00419 a5 
94 | 00420 94 push_v byte 169               | push xx:byte
a9 | 00421 a9 
06 | 00422 06 add                           | add
a4 | 00423 a4 pop byte 169                  | pop xx
a9 | 00424 a9 
c0 | 00425 c0 set_c ubyte 170 1             | open gate 1
aa | 00426 aa 
01 | 00427 01 
39 | 00428 39 exec 45                       | goto  45
01 | 00429 .00 addr:450
c2 | 00430 .2d 
c4 | 00431 c4 set_c byte 165 11             | emit evt1(11)
a5 | 00432 a5 
0b | 00433 0b 
8d | 00434 8d tkins_max 2 53                | insert track Emit_mch_evt1_53
01 | 00435 .00 addr:441
b9 | 00436 .35 
8b | 00437 8b tkins_max 1 54                | insert track Emit_cnt_evt1_54
01 | 00438 .00 addr:444
bc | 00439 .37 
01 | 00440 01 end                           | end
36 | 00441 36 trg 166                       | trigger evt1
a6 | 00442 a6 
01 | 00443 01 end                           | end
c0 | 00444 c0 set_c ubyte 171 1             | open gate 2
ab | 00445 ab 
01 | 00446 01 
39 | 00447 39 exec 45                       | goto  45
01 | 00448 .00 addr:450
c2 | 00449 .2d 
3a | 00450 3a chkret 170                    | ParAnd_out_46 -- if (gate 0 == 0) PC=PC+1
aa | 00451 aa 
01 | 00452 01 end                           | end
3a | 00453 3a chkret 171                    | ParAnd_out_46 -- if (gate 1 == 0) PC=PC+1
ab | 00454 ab 
01 | 00455 01 end                           | end
40 | 00456 40 push_c 1                      | push 1
01 | 00457 01 
94 | 00458 94 push_v byte 169               | push xx:byte
a9 | 00459 a9 
0f | 00460 0f eq                            | eq
a0 | 00461 a0 pop ubyte 145                 | pop msgRadio.d8[0]
91 | 00462 91 
2a | 00463 2a set_v ushort 149 ushort 137   | msgRadio.d16[0] = testStep
11 | 00464 11 
95 | 00465 95 
89 | 00466 89 
b1 | 00467 b1 outevt_v 40 140               | emit SEND len=25 var=msgRadio
28 | 00468 28 
8c | 00469 8c 
90 | 00470 90 push_v ubyte 140              | push msgRadio.type [Optm:: push_c addr + deref]
8c | 00471 8c 
a0 | 00472 a0 pop ubyte 118                 | evt SEND_DONE() auxId = pop
76 | 00473 76 
d1 | 00474 d1 set_c ushort 119 62           | await SEND_DONE()[2]
77 | 00475 77 
01 | 00476 .00 addr:479
df | 00477 .3e 
01 | 00478 01 end                           | end
29 | 00479 29 clken_c 4 100 63              | clock enable Awake_100_63 100msec
01 | 00480 01 
04 | 00481 04 
64 | 00482 64 
01 | 00483 .00 addr:486
e6 | 00484 .3f 
01 | 00485 01 end                           | end
c1 | 00486 c1 set_c ushort 137 04           | testStep = 04
89 | 00487 89 
04 | 00488 04 
c4 | 00489 c4 set_c byte 165 0              | xx = 0
a5 | 00490 a5 
00 | 00491 00 
43 | 00492 43 push_c 1148846080             | push 1.0e3
44 | 00493 44 
7a | 00494 7a 
00 | 00495 00 
00 | 00496 00 
46 | 00497 46 cast float ulong (2)          | cast float ulong
a2 | 00498 a2 pop ulong 166                 | pop time
a6 | 00499 a6 
89 | 00500 89 tkins_max 0 66                | insert track ParOr_sub_1_66
01 | 00501 .00 addr:507
fb | 00502 .42 
89 | 00503 89 tkins_max 0 67                | insert track ParOr_sub_2_67
02 | 00504 .00 addr:525
0d | 00505 .43 
01 | 00506 01 end                           | end
40 | 00507 40 push_c 1                      | push 1
01 | 00508 01 
92 | 00509 92 push_v ulong 166              | push time:ulong
a6 | 00510 a6 
06 | 00511 06 add                           | add
27 | 00512 27 clken_e 5 0 70                | clock enable Awake_exp_70 (stack)ms
01 | 00513 01 
05 | 00514 05 
02 | 00515 .00 addr:518
06 | 00516 .46 
01 | 00517 01 end                           | end
40 | 00518 40 push_c 165                    | push &xx
a5 | 00519 a5 
60 | 00520 60 inc byte                      | inc byte
89 | 00521 89 tkins_max 0 68                | insert track ParOr_out_68
02 | 00522 .00 addr:539
1b | 00523 .44 
01 | 00524 01 end                           | end
28 | 00525 28 clken_v 6 0 ulong 166 72      | clock enable Awake_time_72 (time:ulong)ms
11 | 00526 11 
06 | 00527 06 
a6 | 00528 a6 
02 | 00529 .00 addr:532
14 | 00530 .48 
01 | 00531 01 end                           | end
40 | 00532 40 push_c 165                    | push &xx
a5 | 00533 a5 
64 | 00534 64 dec byte                      | dec byte
89 | 00535 89 tkins_max 0 68                | insert track ParOr_out_68
02 | 00536 .00 addr:539
1b | 00537 .44 
01 | 00538 01 end                           | end
48 | 00539 48 memclr 40 16                  | clear WClocks gates from 5 to 7
28 | 00540 28 
10 | 00541 10 
40 | 00542 40 push_c 1                      | push 1
01 | 00543 01 
04 | 00544 04 neg                           | neg
94 | 00545 94 push_v byte 165               | push xx:byte
a5 | 00546 a5 
0f | 00547 0f eq                            | eq
a0 | 00548 a0 pop ubyte 145                 | pop msgRadio.d8[0]
91 | 00549 91 
2a | 00550 2a set_v ushort 149 ushort 137   | msgRadio.d16[0] = testStep
11 | 00551 11 
95 | 00552 95 
89 | 00553 89 
b1 | 00554 b1 outevt_v 40 140               | emit SEND len=25 var=msgRadio
28 | 00555 28 
8c | 00556 8c 
90 | 00557 90 push_v ubyte 140              | push msgRadio.type [Optm:: push_c addr + deref]
8c | 00558 8c 
a0 | 00559 a0 pop ubyte 121                 | evt SEND_DONE() auxId = pop
79 | 00560 79 
d1 | 00561 d1 set_c ushort 122 79           | await SEND_DONE()[3]
7a | 00562 7a 
02 | 00563 .00 addr:566
36 | 00564 .4f 
01 | 00565 01 end                           | end
29 | 00566 29 clken_c 7 100 80              | clock enable Awake_100_80 100msec
01 | 00567 01 
07 | 00568 07 
64 | 00569 64 
02 | 00570 .00 addr:573
3d | 00571 .50 
01 | 00572 01 end                           | end
c1 | 00573 c1 set_c ushort 137 05           | testStep = 05
89 | 00574 89 
05 | 00575 05 
24 | 00576 24 func 0                        | func getNodeId
00 | 00577 00 
a1 | 00578 a1 pop ushort 165                | pop moteid
a5 | 00579 a5 
c4 | 00580 c4 set_c byte 167 2              | idx = 2
a7 | 00581 a7 
02 | 00582 02 
40 | 00583 40 push_c 2                      | push 2
02 | 00584 02 
40 | 00585 40 push_c 2                      | push 2
02 | 00586 02 
40 | 00587 40 push_c 4                      | push 4
04 | 00588 04 
91 | 00589 91 push_v ushort 165             | push moteid:ushort
a5 | 00590 a5 
08 | 00591 08 mult                          | mult
09 | 00592 09 div                           | div
09 | 00593 09 div                           | div
30 | 00594 30 poparr_v ushort 168 byte 167 4| pop to yy[idx]
14 | 00595 14 
a8 | 00596 a8 
a7 | 00597 a7 
04 | 00598 04 
2a | 00599 2a set_v ushort 176 ushort 172   | xx = yy[2]
11 | 00600 11 
b0 | 00601 b0 
ac | 00602 ac 
40 | 00603 40 push_c 1                      | push 1
01 | 00604 01 
91 | 00605 91 push_v ushort 176             | push xx:ushort
b0 | 00606 b0 
06 | 00607 06 add                           | add
91 | 00608 91 push_v ushort 165             | push moteid:ushort
a5 | 00609 a5 
14 | 00610 14 lt                            | lt
40 | 00611 40 push_c 1                      | push 1
01 | 00612 01 
91 | 00613 91 push_v ushort 176             | push xx:ushort
b0 | 00614 b0 
05 | 00615 05 sub                           | sub
91 | 00616 91 push_v ushort 165             | push moteid:ushort
a5 | 00617 a5 
13 | 00618 13 gt                            | gt
40 | 00619 40 push_c 1                      | push 1
01 | 00620 01 
91 | 00621 91 push_v ushort 176             | push xx:ushort
b0 | 00622 b0 
06 | 00623 06 add                           | add
91 | 00624 91 push_v ushort 165             | push moteid:ushort
a5 | 00625 a5 
12 | 00626 12 lte                           | lte
40 | 00627 40 push_c 1                      | push 1
01 | 00628 01 
91 | 00629 91 push_v ushort 176             | push xx:ushort
b0 | 00630 b0 
05 | 00631 05 sub                           | sub
91 | 00632 91 push_v ushort 165             | push moteid:ushort
a5 | 00633 a5 
11 | 00634 11 gte                           | gte
91 | 00635 91 push_v ushort 176             | push xx:ushort
b0 | 00636 b0 
91 | 00637 91 push_v ushort 165             | push moteid:ushort
a5 | 00638 a5 
10 | 00639 10 neq                           | neq
03 | 00640 03 lnot                          | lnot
91 | 00641 91 push_v ushort 176             | push xx:ushort
b0 | 00642 b0 
91 | 00643 91 push_v ushort 165             | push moteid:ushort
a5 | 00644 a5 
0f | 00645 0f eq                            | eq
16 | 00646 16 land                          | land
16 | 00647 16 land                          | land
16 | 00648 16 land                          | land
16 | 00649 16 land                          | land
16 | 00650 16 land                          | land
a0 | 00651 a0 pop ubyte 178                 | pop stat
b2 | 00652 b2 
40 | 00653 40 push_c 0                      | push 0
00 | 00654 00 
90 | 00655 90 push_v ubyte 178              | push stat:ubyte
b2 | 00656 b2 
15 | 00657 15 lor                           | lor
a0 | 00658 a0 pop ubyte 178                 | pop stat
b2 | 00659 b2 
40 | 00660 40 push_c 0                      | push 0
00 | 00661 00 
40 | 00662 40 push_c 2                      | push 2
02 | 00663 02 
40 | 00664 40 push_c 0x04                   | push 0x04
04 | 00665 04 
40 | 00666 40 push_c 2                      | push 2
02 | 00667 02 
40 | 00668 40 push_c 2                      | push 2
02 | 00669 02 
90 | 00670 90 push_v ubyte 178              | push stat:ubyte
b2 | 00671 b2 
06 | 00672 06 add                           | add
0c | 00673 0c lshft                         | lshft
0b | 00674 0b band                          | band
0d | 00675 0d rshft                         | rshft
0e | 00676 0e bxor                          | bxor
a0 | 00677 a0 pop ubyte 178                 | pop stat
b2 | 00678 b2 
40 | 00679 40 push_c 0xff                   | push 0xff
ff | 00680 ff 
02 | 00681 02 bnot                          | bnot
90 | 00682 90 push_v ubyte 178              | push stat:ubyte
b2 | 00683 b2 
0a | 00684 0a bor                           | bor
a0 | 00685 a0 pop ubyte 178                 | pop stat
b2 | 00686 b2 
2a | 00687 2a set_v ubyte 145 ubyte 178     | msgRadio.d8[0] = stat
00 | 00688 00 
91 | 00689 91 
b2 | 00690 b2 
2a | 00691 2a set_v ushort 149 ushort 137   | msgRadio.d16[0] = testStep
11 | 00692 11 
95 | 00693 95 
89 | 00694 89 
b1 | 00695 b1 outevt_v 40 140               | emit SEND len=25 var=msgRadio
28 | 00696 28 
8c | 00697 8c 
90 | 00698 90 push_v ubyte 140              | push msgRadio.type [Optm:: push_c addr + deref]
8c | 00699 8c 
a0 | 00700 a0 pop ubyte 124                 | evt SEND_DONE() auxId = pop
7c | 00701 7c 
d1 | 00702 d1 set_c ushort 125 108          | await SEND_DONE()[4]
7d | 00703 7d 
02 | 00704 .00 addr:707
c3 | 00705 .6c 
01 | 00706 01 end                           | end
29 | 00707 29 clken_c 8 100 109             | clock enable Awake_100_109 100msec
01 | 00708 01 
08 | 00709 08 
64 | 00710 64 
02 | 00711 .00 addr:714
ca | 00712 .6d 
01 | 00713 01 end                           | end
c1 | 00714 c1 set_c ushort 137 06           | testStep = 06
89 | 00715 89 
06 | 00716 06 
c4 | 00717 c4 set_c byte 181 0              | idx = 0
b5 | 00718 b5 
00 | 00719 00 
43 | 00720 43 push_c 1092773478             | push 10.15
41 | 00721 41 
22 | 00722 22 
66 | 00723 66 
66 | 00724 66 
32 | 00725 32 pusharr_v float 165 byte 181 4| pusharr_v &xx[idx]
34 | 00726 34 
a5 | 00727 a5 
b5 | 00728 b5 
04 | 00729 04 
6b | 00730 6b set_e float                   | set (float)*(pop1) = pop2
43 | 00731 43 push_c 1036831949             | push 0.1
3d | 00732 3d 
cc | 00733 cc 
cc | 00734 cc 
cd | 00735 cd 
32 | 00736 32 pusharr_v float 165 byte 181 4| pusharr_v &xx[idx]
34 | 00737 34 
a5 | 00738 a5 
b5 | 00739 b5 
04 | 00740 04 
73 | 00741 73 deref float                   | deref float
1a | 00742 1a sub_f                         | sub_f
a3 | 00743 a3 pop float 182                 | pop yy
b6 | 00744 b6 
43 | 00745 43 push_c 1036831949             | push 0.1
3d | 00746 3d 
cc | 00747 cc 
cc | 00748 cc 
cd | 00749 cd 
19 | 00750 19 neg_f                         | neg_f
93 | 00751 93 push_v float 182              | push yy:float
b6 | 00752 b6 
1b | 00753 1b add_f                         | add_f
32 | 00754 32 pusharr_v float 165 byte 181 4| pusharr_v &xx[idx]
34 | 00755 34 
a5 | 00756 a5 
b5 | 00757 b5 
04 | 00758 04 
6b | 00759 6b set_e float                   | set (float)*(pop1) = pop2
43 | 00760 43 push_c 1120403456             | push 100.0
42 | 00761 42 
c8 | 00762 c8 
00 | 00763 00 
00 | 00764 00 
43 | 00765 43 push_c 1050253722             | push 0.30
3e | 00766 3e 
99 | 00767 99 
99 | 00768 99 
9a | 00769 9a 
32 | 00770 32 pusharr_v float 165 byte 181 4| pusharr_v &xx[idx]
34 | 00771 34 
a5 | 00772 a5 
b5 | 00773 b5 
04 | 00774 04 
73 | 00775 73 deref float                   | deref float
1b | 00776 1b add_f                         | add_f
1c | 00777 1c mult_f                        | mult_f
40 | 00778 40 push_c 165                    | push_c &xx:float*
a5 | 00779 a5 
40 | 00780 40 push_c 4                      | push idx max 4
04 | 00781 04 
40 | 00782 40 push_c 1                      | push 1
01 | 00783 01 
94 | 00784 94 push_v byte 181               | push idx:byte
b5 | 00785 b5 
06 | 00786 06 add                           | add
07 | 00787 07 mod                           | mod: limmit idx
40 | 00788 40 push_c 4                      | push var len float
04 | 00789 04 
08 | 00790 08 mult                          | mult: varlen * idx
06 | 00791 06 add                           | add: array base addr + len position
6b | 00792 6b set_e float                   | set (float)*(pop1) = pop2
40 | 00793 40 push_c 102                    | push 102
66 | 00794 66 
40 | 00795 40 push_c 10                     | push 10
0a | 00796 0a 
44 | 00797 44 cast ulong float (0)          | cast ulong float
93 | 00798 93 push_v float 169              | push_c &xx[1] [Optm:: push_c addr + deref]
a9 | 00799 a9 
1d | 00800 1d div_f                         | div_f
46 | 00801 46 cast float ulong (2)          | cast float ulong
0f | 00802 0f eq                            | eq
a0 | 00803 a0 pop ubyte 186                 | pop stat
ba | 00804 ba 
43 | 00805 43 push_c 1092563763             | push 9.95
41 | 00806 41 
1f | 00807 1f 
33 | 00808 33 
33 | 00809 33 
93 | 00810 93 push_v float 165              | push_c &xx[0] [Optm:: push_c addr + deref]
a5 | 00811 a5 
21 | 00812 21 lte_f                         | lte_f
43 | 00813 43 push_c 1092563763             | push 9.95
41 | 00814 41 
1f | 00815 1f 
33 | 00816 33 
33 | 00817 33 
93 | 00818 93 push_v float 165              | push_c &xx[0] [Optm:: push_c addr + deref]
a5 | 00819 a5 
20 | 00820 20 gte_f                         | gte_f
03 | 00821 03 lnot                          | lnot
43 | 00822 43 push_c 1091567616             | push 9.0
41 | 00823 41 
10 | 00824 10 
00 | 00825 00 
00 | 00826 00 
93 | 00827 93 push_v float 165              | push_c &xx[0] [Optm:: push_c addr + deref]
a5 | 00828 a5 
22 | 00829 22 gt_f                          | gt_f
43 | 00830 43 push_c 1092773478             | push 10.15
41 | 00831 41 
22 | 00832 22 
66 | 00833 66 
66 | 00834 66 
93 | 00835 93 push_v float 165              | push_c &xx[0] [Optm:: push_c addr + deref]
a5 | 00836 a5 
23 | 00837 23 lt_f                          | lt_f
43 | 00838 43 push_c 1092773478             | push 10.15
41 | 00839 41 
22 | 00840 22 
66 | 00841 66 
66 | 00842 66 
93 | 00843 93 push_v float 165              | push_c &xx[0] [Optm:: push_c addr + deref]
a5 | 00844 a5 
1f | 00845 1f neq_f                         | neq_f
43 | 00846 43 push_c 1092563763             | push 9.95
41 | 00847 41 
1f | 00848 1f 
33 | 00849 33 
33 | 00850 33 
93 | 00851 93 push_v float 165              | push_c &xx[0] [Optm:: push_c addr + deref]
a5 | 00852 a5 
1e | 00853 1e eq_f                          | eq_f
03 | 00854 03 lnot                          | lnot
16 | 00855 16 land                          | land
16 | 00856 16 land                          | land
16 | 00857 16 land                          | land
16 | 00858 16 land                          | land
16 | 00859 16 land                          | land
a0 | 00860 a0 pop ubyte 187                 | pop stat2
bb | 00861 bb 
90 | 00862 90 push_v ubyte 187              | push stat2:ubyte
bb | 00863 bb 
90 | 00864 90 push_v ubyte 186              | push stat:ubyte
ba | 00865 ba 
16 | 00866 16 land                          | land
a0 | 00867 a0 pop ubyte 145                 | pop msgRadio.d8[0]
91 | 00868 91 
2a | 00869 2a set_v ushort 149 ushort 137   | msgRadio.d16[0] = testStep
11 | 00870 11 
95 | 00871 95 
89 | 00872 89 
b1 | 00873 b1 outevt_v 40 140               | emit SEND len=25 var=msgRadio
28 | 00874 28 
8c | 00875 8c 
90 | 00876 90 push_v ubyte 140              | push msgRadio.type [Optm:: push_c addr + deref]
8c | 00877 8c 
a0 | 00878 a0 pop ubyte 127                 | evt SEND_DONE() auxId = pop
7f | 00879 7f 
d1 | 00880 d1 set_c ushort 128 133          | await SEND_DONE()[5]
80 | 00881 80 
03 | 00882 .00 addr:885
75 | 00883 .85 
01 | 00884 01 end                           | end
29 | 00885 29 clken_c 9 100 134             | clock enable Awake_100_134 100msec
01 | 00886 01 
09 | 00887 09 
64 | 00888 64 
03 | 00889 .00 addr:892
7c | 00890 .86 
01 | 00891 01 end                           | end
c1 | 00892 c1 set_c ushort 137 07           | testStep = 07
89 | 00893 89 
07 | 00894 07 
c0 | 00895 c0 set_c ubyte 165 0             | stat = 0
a5 | 00896 a5 
00 | 00897 00 
c0 | 00898 c0 set_c ubyte 166 0             | xx = 0
a6 | 00899 a6 
00 | 00900 00 
26 | 00901 26 outevt_z 9                    | emit REQ_TEMP
09 | 00902 09 
d1 | 00903 d1 set_c ushort 104 139          | await TEMP[0]
68 | 00904 68 
03 | 00905 .00 addr:908
8c | 00906 .8b 
01 | 00907 01 end                           | end
32 | 00908 32 pusharr_v ushort 167 ubyte 166 2  | pusharr_v &temp[xx]
10 | 00909 10 
a7 | 00910 a7 
a6 | 00911 a6 
02 | 00912 02 
34 | 00913 34 getextdt_e 2                  | getExtData stack len=2
02 | 00914 02 
58 | 00915 58 outevt_c 6 1                  | emit LED0 len=1 const=1
06 | 00916 06 
01 | 00917 01 
26 | 00918 26 outevt_z 10                   | emit REQ_PHOTO
0a | 00919 0a 
d1 | 00920 d1 set_c ushort 108 145          | await PHOTO[0]
6c | 00921 6c 
03 | 00922 .00 addr:925
9d | 00923 .91 
01 | 00924 01 end                           | end
5c | 00925 5c getextdt_v 171 2              | getExtData temp2 2
ab | 00926 ab 
02 | 00927 02 
40 | 00928 40 push_c 1                      | push 1
01 | 00929 01 
90 | 00930 90 push_v ubyte 166              | push xx:ubyte
a6 | 00931 a6 
06 | 00932 06 add                           | add
25 | 00933 25 outevt_e 7                    | emit LED1
07 | 00934 07 
2a | 00935 2a set_v ubyte 198 ubyte 166     | xx'=xx
00 | 00936 00 
c6 | 00937 c6 
a6 | 00938 a6 
51 | 00939 51 asen 0 151                    | ceu_async_enable 0 Async_0_151
00 | 00940 00 
03 | 00941 .00 addr:944
b0 | 00942 .97 
01 | 00943 01 end                           | end
c0 | 00944 c0 set_c ubyte 199 0             | event xx = 0 gates
c7 | 00945 c7 
00 | 00946 00 
2b | 00947 2b setarr_vc ushort 200 ubyte 198 2 10  | temp[xx] = 10
10 | 00948 10 
00 | 00949 00 
c8 | 00950 c8 
c6 | 00951 c6 
02 | 00952 02 
0a | 00953 0a 
2c | 00954 2c setarr_vv ushort 200 ubyte 198 2 ubyte 198  | temp[xx] = xx
10 | 00955 10 
00 | 00956 00 
c8 | 00957 c8 
c6 | 00958 c6 
02 | 00959 02 
c6 | 00960 c6 
78 | 00961 78 memcpy 25B. 140 -> 173        | memcpy 25B. msgRadio -> msgRadio2
19 | 00962 19 
8c | 00963 8c 
ad | 00964 ad 
90 | 00965 90 push_v ubyte 140              | push msgRadio.type [Optm:: push_c addr + deref]
8c | 00966 8c 
90 | 00967 90 push_v ubyte 173              | push msgRadio2.type [Optm:: push_c addr + deref]
ad | 00968 ad 
0f | 00969 0f eq                            | eq
40 | 00970 40 push_c 0                      | push 0
00 | 00971 00 
24 | 00972 24 func 13                       | func qClear
0d | 00973 0d 
0f | 00974 0f eq                            | eq
16 | 00975 16 land                          | land
a0 | 00976 a0 pop ubyte 165                 | pop stat
a5 | 00977 a5 
2a | 00978 2a set_v ubyte 145 ubyte 165     | msgRadio.d8[0] = stat
00 | 00979 00 
91 | 00980 91 
a5 | 00981 a5 
2a | 00982 2a set_v ushort 149 ushort 137   | msgRadio.d16[0] = testStep
11 | 00983 11 
95 | 00984 95 
89 | 00985 89 
b1 | 00986 b1 outevt_v 40 140               | emit SEND len=25 var=msgRadio
28 | 00987 28 
8c | 00988 8c 
90 | 00989 90 push_v ubyte 140              | push msgRadio.type [Optm:: push_c addr + deref]
8c | 00990 8c 
a0 | 00991 a0 pop ubyte 130                 | evt SEND_DONE() auxId = pop
82 | 00992 82 
d1 | 00993 d1 set_c ushort 131 161          | await SEND_DONE()[6]
83 | 00994 83 
03 | 00995 .00 addr:998
e6 | 00996 .a1 
01 | 00997 01 end                           | end
29 | 00998 29 clken_c 10 100 162            | clock enable Awake_100_162 100msec
01 | 00999 01 
0a | 01000 0a 
64 | 01001 64 
03 | 01002 .00 addr:1005
ed | 01003 .a2 
01 | 01004 01 end                           | end
d1 | 01005 d1 set_c ushort 137 999          | testStep = 999
89 | 01006 89 
03 | 01007 03 
e7 | 01008 e7 
c0 | 01009 c0 set_c ubyte 145 1             | msgRadio.d8[0] = 1
91 | 01010 91 
01 | 01011 01 
2a | 01012 2a set_v ushort 149 ushort 137   | msgRadio.d16[0] = testStep
11 | 01013 11 
95 | 01014 95 
89 | 01015 89 
b1 | 01016 b1 outevt_v 40 140               | emit SEND len=25 var=msgRadio
28 | 01017 28 
8c | 01018 8c 
90 | 01019 90 push_v ubyte 140              | push msgRadio.type [Optm:: push_c addr + deref]
8c | 01020 8c 
a0 | 01021 a0 pop ubyte 133                 | evt SEND_DONE() auxId = pop
85 | 01022 85 
d1 | 01023 d1 set_c ushort 134 168          | await SEND_DONE()[7]
86 | 01024 86 
04 | 01025 .00 addr:1028
04 | 01026 .a8 
01 | 01027 01 end                           | end
29 | 01028 29 clken_c 11 100 169            | clock enable Awake_100_169 100msec
01 | 01029 01 
0b | 01030 0b 
64 | 01031 64 
04 | 01032 .00 addr:1035
0b | 01033 .a9 
01 | 01034 01 end                           | end
01 | 01035 01 end                           | end
48 | 01036 48 memclr 96 2                   | clear asyncs gates from 0 to 1
60 | 01037 60 
02 | 01038 02 
48 | 01039 48 memclr 0 96                   | clear WClocks gates from 0 to 12
00 | 01040 00 
60 | 01041 60 
01 | 01042 01 end                           | end
